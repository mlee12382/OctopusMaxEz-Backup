[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		# Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
		G90
		G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
		G28 X Y
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

# [gcode_macro TOGGLE_LIGHTBAR]
# description: Toggle the Lightbar Power.
# gcode:
#   SET_PIN PIN=lightbar VALUE={(not printer['output_pin lightbar'].value|int)}

# [gcode_macro LIGHTBAR_ON]
# description: Turn the lightbar on.
# gcode:
#   SET_PIN PIN=lightbar VALUE=1

# [gcode_macro LIGHTBAR_OFF]
# description: Turn the lightbar off.
# gcode:
#   SET_PIN PIN=lightbar VALUE=0


[gcode_macro TOGGLE_LIGHTBAR]
description: Toggle the Lightbar Power.
gcode:
  {action_call_remote_method("set_device_power",
                              device="Lightbar",
                              state="toggle")}

[gcode_macro LIGHTBAR_ON]
description: Turn the lightbar on.
gcode:
  {action_call_remote_method("set_device_power",
                              device="Lightbar",
                              state="on")}

[gcode_macro LIGHTBAR_OFF]
description: Turn the lightbar off.
gcode:
  {action_call_remote_method("set_device_power",
                              device="Lightbar",
                              state="off")}

[gcode_macro TOGGLE_PSU]
description: Toggle the PSU Power.
gcode:
  {action_call_remote_method("set_device_power",
                              device="PSU",
                              state="toggle")}

[gcode_macro PSU_ON]
description: Turn the printer on.
gcode:
  {action_call_remote_method("set_device_power",
                              device="PSU",
                              state="on")}

[gcode_macro PSU_OFF]
description: Turn the printer off.
gcode:
  {action_call_remote_method("set_device_power",
                              device="PSU",
                              state="off")}

[gcode_macro TOGGLE_PRINTER]
description: Toggle the Printer Power.
gcode:
  {action_call_remote_method("set_device_power",
                              device="PRINTER",
                              state="toggle")}

[gcode_macro PRINTER_ON]
description: Turn the printer on.
gcode:
  {action_call_remote_method("set_device_power",
                              device="Printer",
                              state="on")}

[gcode_macro PRINTER_OFF]
description: Turn the printer off.
gcode:
  {action_call_remote_method("set_device_power",
                              device="Printer",
                              state="off")}

[gcode_macro _POWER_OFF_MAIN]
description: Turn off printer.
gcode:
    {action_call_remote_method("set_device_power",
                              device="Printer",
                              state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state =="Idle" %}
    BACKUP_CFG
    _POWER_OFF_MAIN
  {% endif %}

######################################################################
# BMP280/BME280/BME680 Environmental Sensor
######################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

# [gcode_macro QUERY_BME280]
# gcode:
#     {% set sensor = printer["bme280 my_sensor"] %}
#     {action_respond_info(
#         "Temperature: %.2f C\n"
#         "Pressure: %.2f hPa\n"
#         "Humidity: %.2f%%" % (
#             sensor.temperature,
#             sensor.pressure,
#             sensor.humidity))}

[gcode_macro GET_GAS]
gcode:
    {% set sensor = printer["bme280 chamber"] %}
    M118 {sensor.gas}

[gcode_macro QUERY_CHAMBER]
gcode:
    {% set sensor = printer["bme280 chamber"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%\n"
        "Gas Level: %.2f VOC" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas_level))}

# [gcode_macro HEAT_SOAK]
# description: heats the bed for a while

# variable_target_temp: 0
# variable_stage: None ## heating -> soaking -> done -> None

# ## in seconds
# variable_check_interval: 10
# variable_soak_time_remaining: 0
# variable_total_time_elapsed: 0

# gcode:
#     {% set TARGET = params.TARGET | default(100) | float %}
#     {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds

#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

#     ;; fire up the heater
#     SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

#     ;; run the fan to circulate air
#     _SET_FAN_SPEED PERCENT=50

#     ;; put the bed and nozzle where they're a safe distance apart
#     G28
#     CENTER

#     M84 ;; turn off steppers

#     UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

#     ;; pause the print during heat soak
#     BASE_PAUSE

# [gcode_macro CANCEL_HEAT_SOAK]
# description: cancels an in-progress HEAT_SOAK cycle
# gcode:
#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
#     UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

# [delayed_gcode heat_soaker]
# ; ## debug
# ; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
# gcode:
#     {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

#     ## update total time elapsed
#     {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

#     {% set stage = heat_soak.stage %}
#     {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
#         {% set stage = "soaking" %}
#     {% endif %}

#     {% if stage == "soaking" %}
#         ## update soak countdown
#         {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
#         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

#         {% if soak_time_remaining == 0 %}
#             {% set stage = "done" %}
#         {% endif %}
#     {% endif %}

#     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

#     {% if stage in ("done", "cancel") %}

#         {% if stage == "cancel" %}
#             {% set stage = "done" %}
#             TURN_OFF_HEATERS
#             M107 ; turn off fan

#             M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }

#             ;; heat soak was cancelled -- also cancel the print
#             CANCEL_PRINT
#         {% else %}
#             M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
#             ;; heat soak is complete. Call the complete macro prior to starting the print
#             # SOAK_COMPLETE
#             ;; resume / start the print
#             BASE_RESUME
#         {% endif %}

#         ## reset all state vars, except stage, which may be queried via the api
#         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
#         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
#         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

#     {% else %}

#         {% if total_time_elapsed % 90 == 0 %}
#             ## output status periodically
#             {% if stage == "heating" %}
#                 M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
#             {% elif stage == "soaking" %}
#                 M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
#             {% endif %}
#         {% endif %}

#         ## trigger ourselves again
#         UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

#         ## dwell for 1ms to prevent from going idle
#         G4 P1

#     {% endif %}

# [gcode_macro _SET_FAN_SPEED]
# gcode:
#     M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z20 F7200

[gcode_macro PRINT_WARMUP]
description: Perform initial homing and heating tasks
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP | default(190) | float %}
    {% set BED_TEMP = params.BED_TEMP | default(60) | float %}

    # Homing, QGL, pre-warming print nozzle etc.
    M104 S{EXTRUDER_TEMP * 0.75}        # set extruder temperature to 75%
    M140 S{BED_TEMP}                    # set bed temperature
    STATUS_HOMING                       # sb_leds homing
    G28                                 # home printer
    STATUS_HEATING                      # sb_leds heating

    # wait for the print bed to reach thermal equilibrium
    HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor chamber' SOAK_TEMP=30 RATE=0.1 RATE_SMOOTH=30 HEATING_REPORT_INTERVAL=5 SOAKING_REPORT_INTERVAL=10

[gcode_macro ABS_WARMUP]
description: Preform ABS Heatsoak
gcode:
  PRINT_WARMUP EXTRUDER_TEMP=240 BED_TEMP=100

# [gcode_macro SAVE_CONFIG]
# description: Add Backup to Save_config
# rename_existing: _BASE_SAVE_CONFIG
# gcode:
#   BACKUP_CFG
#   _BASE_SAVE_CONFIG


